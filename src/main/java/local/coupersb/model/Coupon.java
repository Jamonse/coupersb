package local.coupersb.model;

import static local.coupersb.validation.ValidationUtils.COUPON_END_DATE_NULL_MESSAGE;
import static local.coupersb.validation.ValidationUtils.COUPON_NEGATIVE_QUANTITY_MESSAGE;
import static local.coupersb.validation.ValidationUtils.COUPON_START_DATE_NULL_MESSAGE;
import static local.coupersb.validation.ValidationUtils.COUPON_TITLE_BLANK_MESSAGE;
import static local.coupersb.validation.ValidationUtils.COUPON_TITLE_SIZE_MESSAGE;
import static local.coupersb.validation.ValidationUtils.COUPON_MAX_QUANTITY_MESSAGE;
import static local.coupersb.validation.ValidationUtils.COUPON_MAX_PRICE_MESSAGE;
import static local.coupersb.validation.ValidationUtils.MAX_COUPON_PRICE;
import static local.coupersb.validation.ValidationUtils.MAX_COUPON_QUANTITY;

import java.sql.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.PreRemove;
import javax.persistence.Table;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonIgnore;


/**
 * The class {@code Coupon} is a main element of the coupons system
 * clients of the system can create or purchase a coupon the can be
 * created by this class
 * 
 * @author YAM
 *
 */

@Entity(name = "coupon")
@Table(name = "coupons")
public class Coupon 
{
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id")
	private int id;
	
	@ManyToOne
	@JoinColumn(
			name = "company_id",
			foreignKey = @ForeignKey(name = "Fk_coupon_company"),
			nullable = false)
	private Company ownerCompany;
	
	@Size(min = 2, message = COUPON_TITLE_SIZE_MESSAGE)
	@NotBlank(message = COUPON_TITLE_BLANK_MESSAGE)
	@Column(name = "title", nullable = false)
	private String title;
	
	@Column(name = "description")
	private String description;
	
	@Valid
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(
			name = "category_id",
			foreignKey = @ForeignKey(name = "Fk_coupon_category"),
			nullable = false)
	private Category category;
	
	@NotNull(message = COUPON_START_DATE_NULL_MESSAGE)
	@Column(name = "start_date", nullable = false)
	private Date startDate;
	
	@NotNull(message = COUPON_END_DATE_NULL_MESSAGE)
	@Column(name = "end_date", nullable = false)
	private Date endDate;
	
	@Min(value = 0, message = COUPON_NEGATIVE_QUANTITY_MESSAGE)
	@Max(value = MAX_COUPON_QUANTITY, message = COUPON_MAX_QUANTITY_MESSAGE)
	@Column(name = "quantity", nullable = false)
	private int quantity;
	
	@Max(value = MAX_COUPON_PRICE, message = COUPON_MAX_PRICE_MESSAGE)
	@Column(name = "price", nullable = false)
	private double price;
	
	@Column(name = "image_path")
	private String imagePath;
	
	@ManyToMany(mappedBy = "purchasedCoupons")
	@JsonIgnore
	Set<Customer> purchasingCustomers;
	
	@ManyToMany(mappedBy = "couponsInCart")
	@JsonIgnore
	Set<Customer> shoppingCustomers;
	
	/**
	 * Creates an empty coupon
	 */
	public Coupon() 
	{
		
	}
	
	/**
	 * Creates a new coupon with all of its necessary attributes (title, category, etc.)
	 * but without its id (that mostly, will be generated by the database)
	 * 
	 * @param companyId the id of the company that created this coupon
	 * @param title the title of the coupon
	 * @param description the description of the coupon
	 * @param category the category of the coupon
	 * @param startDate the starting date (first day of availability) of the coupon
	 * @param endDate the starting date (the day after the last day of availability) of the coupon
	 * @param quantity the quantity of the coupon available for purchase
	 * @param price the price of the coupon
	 * @param imagePath the path of the coupons image on the server
	 */
	public Coupon(String title, String description, Category category
			, Date startDate, Date endDate, int quantity, double price, String imagePath) 
	{
		this.title = title;
		this.description = description;
		this.category = category;
		this.startDate = startDate;
		this.endDate = endDate;
		setQuantity(quantity);
		setPrice(price);
		this.imagePath = imagePath;
	}
	
	/**
	 * Creates a new coupon with all of its necessary attributes (title, category, etc.)
	 * 
	 * @param id the id of the coupon
	 * @param companyId the id of the company that created this coupon
	 * @param title the title of the coupon
	 * @param description the description of the coupon
	 * @param category the category of the coupon
	 * @param startDate the starting date (first day of availability) of the coupon
	 * @param endDate the starting date (the day after the last day of availability) of the coupon
	 * @param quantity the quantity of the coupon available for purchase
	 * @param price the price of the coupon
	 * @param imagePath the path of the coupons image on the server
	 */
	public Coupon(int id, Company ownerCompany, String title, String description, Category category
			, Date startDate, Date endDate, int quantity, double price, String imagePath) 
	{
		setId(id);
		this.ownerCompany = ownerCompany;
		this.title = title;
		this.description = description;
		this.category = category;
		this.startDate = startDate;
		this.endDate = endDate;
		setQuantity(quantity);
		setPrice(price);
		this.imagePath = imagePath;
	}
	
	/**
	 * Returns the coupons id
	 * 
	 * @return the coupons id
	 */
	public int getId() 
	{
		return this.id;
	}
	
	/**
	 * Sets the coupons id
	 * 
	 * @param id the id of the coupon
	 */
	public void setId(int id) 
	{
		if(id > 0)
			this.id = id;
	}
	
	/**
	 * Returns the id of the company that created this coupon
	 * 
	 * @return the id of the company that created this coupon
	 */
	public Company getOwnerCompany() 
	{
		return this.ownerCompany;
	}
	
	/**
	 * Sets the company id of the coupon
	 * 
	 * @param companyId company id to set to the coupon
	 */
	public void setOwnerCompany(Company ownerCompany) 
	{
		this.ownerCompany = ownerCompany;
	}
	
	/**
	 * Returns the title of the coupon
	 * 
	 * @return the title of the coupon
	 */
	public String getTitle() 
	{
		return this.title;
	}
	
	/**
	 * Sets the title of the coupon
	 * 
	 * @param title the title to set to the coupon
	 */
	public void setTitle(String title) 
	{
		this.title = title;
	}
	
	/**
	 * Returns the description of the coupon
	 * 
	 * @return the description of the coupon
	 */
	public String getDescription() 
	{
		return this.description;
	}
	
	/**
	 * Sets the description of the coupon
	 * 
	 * @param description the description to set to the coupon
	 */
	public void setDescription(String description) 
	{
		this.description = description;
	}
	
	/**
	 * Returns the start date of the coupon
	 * 
	 * @return the start date of the coupon
	 */
	public Date getStartDate() 
	{
		return this.startDate;
	}
	
	/**
	 * Sets the start date of the coupon
	 * 
	 * @param startDate the start date to set to the coupon
	 */
	public void setStartDate(Date startDate) 
	{
		this.startDate = startDate;
	}
	
	/**
	 * Returns the end date of the coupons
	 * @return the end date of the coupons
	 */
	public Date getEndDate() 
	{
		return this.endDate;
	}
	
	/**
	 * Sets the end date of the coupon
	 * 
	 * @param endDate the end date date to set to the coupon
	 */
	public void setEndDate(Date endDate) 
	{
		this.endDate = endDate;
	}
	
	/**
	 * Returns the quantity of the coupon
	 * 
	 * @return the quantity of the coupon
	 */
	public int getQuantity() 
	{
		return this.quantity;
	}
	
	/**
	 * Sets the quantity of the coupon
	 * 
	 * @param quantity the quantity to set to the coupon
	 */
	public void setQuantity(int quantity) 
	{
		if(quantity >= 0)
			this.quantity = quantity;
	}
	
	/**
	 * Returns the price of the coupon
	 * 
	 * @return the price of the coupon
	 */
	public double getPrice() 
	{
		return this.price;
	}
	
	/**
	 * Sets the price of the coupon
	 * 
	 * @param price the price to set to the coupon
	 */
	public void setPrice(double price) 
	{
		if(price >= 0)
			this.price = price;
	}
	
	/**
	 * Returns the path of the image of the coupon
	 * 
	 * @return the path of the image of the coupon
	 */
	public String getImagePath() 
	{
		return imagePath;
	}
	
	/**
	 * Sets the path of the image of the coupon
	 * 
	 * @param imagePath the path of the image of the coupon
	 */
	public void setImagePath(String imagePath) 
	{
		this.imagePath = imagePath;
	}
	
	/**
	 * Returns the category of the coupon
	 * 
	 * @return the category of the coupon
	 */
	public Category getCategory() 
	{
		return category;
	}
	
	/**
	 * Sets the category of the coupon
	 * 
	 * @param category the category to set to the coupon
	 */
	public void setCategory(Category category) 
	{
		this.category = category;
	}
	
	public Set<Customer> getPurchasingCustomers() 
	{
		return purchasingCustomers;
	}
	
	public Set<Customer> getShoppingCustomers()
	{
		return this.shoppingCustomers;
	}

	/**
	 * Returns {@code true} if the coupon is expired
	 * otherwise returns {@code false}
	 * 
	 * @return {@code true} if the coupon is expired
	 * otherwise returns {@code false}
	 */
	@JsonIgnore
	public boolean isExpiered()
	{
		Date currentDate = new Date(new java.util.Date().getTime());
		
		return currentDate.after(endDate);	
	}
	
	/**
	 * Returns {@code true} if the coupon is available for purchase
	 * (has a quantity of 1 or more), otherwise returns {@code false}
	 * @return {@code true} if the coupon is available for purchase
	 * (has a quantity of 1 or more), otherwise returns {@code false}
	 */
	@JsonIgnore
	public boolean isAvailable()
	{
		return this.quantity > 0;
	}
	
	@PreRemove
	private void deleteCouponHistory()
	{
		this.getPurchasingCustomers().forEach(customer -> customer.removePurchasedCoupon(this));
		this.getShoppingCustomers().forEach(customer -> customer.removeCouponFromCart(this));
	}

	@Override
	public String toString() 
	{
		return "Coupon [id=" + id + ", OwnerCompany=" + ownerCompany 
				+ ", title=" + title + ", description=" + description
				+ ", startDate=" + startDate + ", endDate=" + endDate 
				+ ", quantity=" + quantity + ", price=" + price
				+ ", imagePath=" + imagePath + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Coupon other = (Coupon) obj;
		if (id != other.id)
			return false;
		return true;
	}
	
}